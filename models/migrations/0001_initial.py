# Generated by Django 4.1.5 on 2023-02-03 17:46

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Raiting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "users_name",
                    models.CharField(max_length=25, verbose_name="users_name"),
                ),
                ("rate", models.IntegerField(default=False, null=True)),
                ("message", models.CharField(max_length=200, null=True)),
                ("service_name", models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "users_name",
                    models.CharField(max_length=25, verbose_name="users_name"),
                ),
                (
                    "types",
                    models.CharField(max_length=200, null=True, verbose_name="types"),
                ),
                ("message", models.CharField(max_length=200, null=True)),
                ("service_slug", models.SlugField(max_length=255, null=True)),
                ("is_moderated", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=25, unique=True, verbose_name="name"
                    ),
                ),
                ("url", models.URLField(max_length=25, unique=True)),
                (
                    "status",
                    models.CharField(default=None, max_length=999999, null=True),
                ),
                (
                    "reports",
                    models.CharField(default=None, max_length=999999, null=True),
                ),
                ("time", models.CharField(default=None, max_length=999999, null=True)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("image", models.FileField(null=True, upload_to="")),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        max_length=20, null=True, unique=True, verbose_name="username"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, null=True, unique=True, verbose_name="email"
                    ),
                ),
                ("subscribes", models.CharField(max_length=9999, null=True)),
                ("tgid", models.CharField(max_length=50, null=True, unique=True)),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_confirmed",
                    models.BooleanField(default=False, verbose_name="confirmed"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
